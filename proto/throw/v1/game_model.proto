syntax = "proto3";

package throw.v1;
option go_package = "github.com/suhanyujie/throw_interface/proto/throw/v1;v1";

// 游戏开始，服务端推送给客户端
message GameStart {
  string msg = 2;// 游戏即将开始 倒计时 3 s
}

// 客户端玩家发起一次攻击
message AttackOnceInfo {
  int32 uid = 1;  // 发起攻击的用户 id
}

// 攻击结果
// 服务端推送给客户端
message AttackOnceResult {
  // @inject_tag: json:"event" msgpack:"event"
  string event = 1;
  // @inject_tag: msgpack:"msg"
  string msg = 2;
  // 攻击类型，目前先普通攻击 1-普攻，2-技能 | @inject_tag: msgpack:"attackType"
  string attackType = 3;
  // 玩家操作的角色信息 | @inject_tag: msgpack:"players"
  repeated PlayerStatus players = 4;
  // 攻击方 | @inject_tag: msgpack:"from"
  int32 from = 5;
  // 受到攻击的一方 | @inject_tag: msgpack:"to"
  int32 to = 6;
  // 命中信息 | @inject_tag: msgpack:"hitInfo"
  HitInfo hitInfo = 7;
}

// 一次攻击的命中信息
message HitInfo {
  // 是否命中 | @inject_tag: json:"isHit" msgpack:"isHit"
  bool isHit = 1;
  // 命中部位 | @inject_tag: json:"pos" msgpack:"pos"
  HitPos pos = 2;
  // 命中的攻击编号 | @inject_tag: json:"atkId" msgpack:"atkId"
  string atkId = 3;
  // 使用的技能 id | @inject_tag: json:"skillId" msgpack:"skillId"
  int32 skillId = 4;
}

message PlayerStatus {
  // @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // @inject_tag: msgpack:"heroId"
  int32 heroId = 2;
  // @inject_tag: msgpack:"hp"
  int32 hp = 3;
  // @inject_tag: msgpack:"name"
  string name = 4;
}

// 退出游戏房间
// 考虑一下，游戏中途时，用户退出房间，如何处理？
message UserQuit {
  // @inject_tag: msgpack:"uid"
  int32 uid = 1;
}

// 游戏结束时，服务端推送消息给客户端
// `event` 表示游戏结束标识，用于前端识别，该推送是什么事件/消息
message GameOver {
  // @inject_tag: msgpack:"winPlayer"
  RoleDetailed winPlayer = 1;
  // @inject_tag: msgpack:"losePlayer"
  RoleDetailed losePlayer = 2;
  // @inject_tag: msgpack:"event"
  string event = 3;
  // 结算信息 | @inject_tag: msgpack:"playerSettles"
  repeated PlayerSettleInfo playerSettles = 4;
  // 战斗时长，秒数 | @inject_tag: msgpack:"usedTimeSec" json:"usedTimeSec"
  int32 usedTimeSec = 5;
}

// 游戏结束后，玩家的结算信息
message PlayerSettleInfo {
  // 命中率 | @inject_tag: msgpack:"hitRate" json:"hitRate"
  float hitRate = 1;
  // 攻击次数 | @inject_tag: msgpack:"atkCount" json:"atkCount"
  int32 atkCount = 2;
  // 命中次数 | @inject_tag: msgpack:"hitCount" json:"hitCount"
  int32 hitCount = 3;
  // 平均每发伤害 | @inject_tag: msgpack:"damagePerShotAvg" json:"damagePerShotAvg"
  float damagePerShotAvg = 4;
  // 最大连击次数 | @inject_tag: msgpack:"maxComboHitTimes" json:"maxComboHitTimes"
  int32 maxComboHitTimes = 5;
  // 打击到致命部位的总伤害 | @inject_tag: msgpack:"fatalInjury" json:"fatalInjury"
  int32 fatalInjury = 6;
  // 各部位命中次数 | @inject_tag: msgpack:"hitPosMap" json:"hitPosMap"
  map<int32, int32> hitPosMap = 7;
  // 使用道具的次数 | @inject_tag: msgpack:"usingPropCountMap" json:"usingPropCountMap"
  map<int32, int32> usingPropCountMap = 8;
  // 攻击被阻挡次数 | @inject_tag: msgpack:"weaponBlockCount" json:"weaponBlockCount"
  int32 weaponBlockCount = 9;
  // 用户 id | @inject_tag: msgpack:"uid" json:"uid"
  int32 uid = 10;
  // 角色 id | @inject_tag: msgpack:"roleId" json:"roleId"
  int32 roleId = 11;
  // 玩家赢得的代币数，为负数时，表示损失的代币数 | @inject_tag: msgpack:"earnToken" json:"earnToken"
  int32 earnToken = 12;
  // nft 分值、战力 | @inject_tag: msgpack:"nftScore" json:"nftScore"
  int32 nftScore = 13;
  // 推荐的场次 | @inject_tag: msgpack:"recGameField" json:"recGameField"
  int32 recGameField = 14;
}

// 玩家/角色移动
message RoleMove {
  // 移动的角色对应的玩家 uid | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // 角色的 id | @inject_tag: msgpack:"roleId"
  int32 roleId = 2;
  // 新的位置 | @inject_tag: msgpack:"newPos"
  RolePosition newPos = 3;
  // 移动前的位置 | @inject_tag: msgpack:"beforePos"
  RolePosition beforePos = 4;
}

enum SkillState {
  // 前摇状态
  Front = 0;
  // 施放状态
  Casting = 1;
  // 后摇状态
  Back = 2;
  // 冷却
  Cooling = 3;
  // 充能中
  Charging = 4;
  // 就绪
  Ready = 5;
}

// 广播攻击行为
message MsgRoleAttack {
  // 玩家编号 | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // @inject_tag: msgpack:"skillId"
  int32 skillId = 2;
  // 技能状态 | @inject_tag: msgpack:"state"
  SkillState state = 3;
  // 目标玩家编号（uid） | @inject_tag: msgpack:"targetId"
  int32 targetId = 4;
  // 攻击方坐标 | @inject_tag: msgpack:"pos"
  RolePosition pos = 5;
  // 攻击参数 | @inject_tag: msgpack:"atkInput"
  SInputData atkInput = 6;
  // 攻击编号，服务端分配 | @inject_tag: msgpack:"atkId"
  string atkId = 7;
  // 敌方如果是机器人，则携带此参数。由后端告知前端是否命中；如果没有，可传 null
  optional BotAtkInfo botAtk = 8;
}

message BotAtkInfo {
  // 是否避障。1避障，2不避障  | @inject_tag: msgpack:"avoidance"
  int32 avoidance  = 1;
  // 攻击方式，普攻还是技能    1普攻，2技能  | @inject_tag: msgpack:"atkStyle"
  int32 atkStyle  = 2;
  // 攻击结果 1命中，2差一点点，3乱扔  | @inject_tag: msgpack:"hitRes"
  int32 hitRes  = 3;
  // 命中部位 | @inject_tag: msgpack:"hitPos"
  HitPos hitPos  = 4;
  // 是否能被反弹 | @inject_tag: msgpack:"canRebound"
  // bool canRebound  = 5;
}

message SInputData {
  // 发射起点 x | @inject_tag: msgpack:"sx"
  float sx = 1;
  // 发射起点 y | @inject_tag: msgpack:"sy"
  float sy = 2;
  // 速度 | @inject_tag: msgpack:"vx"
  float vx = 3;
  // @inject_tag: msgpack:"vy"
  float vy = 4;
  // x 方向上的位移 @inject_tag: msgpack:"s"
  float s = 5;
  // y 方向上的位移 @inject_tag: msgpack:"h"
  float h = 6;
  // 力量值 @inject_tag: msgpack:"force"
  float force = 7;
  // 重力刻度 | @inject_tag: msgpack:"gs"
  float gs = 8;
  // 重力系数 | @inject_tag: msgpack:"g"
  float g = 9;
  // 部位偏移 x  | @inject_tag: msgpack:"ex"
  float ex = 10;
  // 部位偏移 y  | @inject_tag: msgpack:"ey"
  float ey = 11;
  // 部位 1，头，2，中间，3 下面 | @inject_tag: msgpack:"parts"
  int32 parts = 12;
}

// 命中敌方信息
message HitRoleInfo {
  // 玩家编号 | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // @inject_tag: msgpack:"skillId"
  int32 skillId = 2;
  // 技能状态 | @inject_tag: msgpack:"state"
  SkillState state = 3;
  // 目标玩家编号（uid） | @inject_tag: msgpack:"targetId"
  int32 targetId = 4;
  // 攻击方坐标 | @inject_tag: msgpack:"rolePos"
  RolePosition rolePos = 5;
  // 是否命中 | @inject_tag: msgpack:"isHit"
  bool isHit = 6;
  // 命中部位 @inject_tag: msgpack:"hitPos"
  HitPos hitPos = 7;
  // 攻击参数 | @inject_tag: msgpack:"atkInput"
  SInputData atkInput = 8;
  // 攻击编号 | @inject_tag: msgpack:"atkId"
  string atkId = 9;
}


enum HitPos {
  Empty0 = 0; // 为保持和前端的枚举值一致，这里占个位
  Fatal = 1;// 致命：头部
  Secondary = 2;// 次要：膝盖
  Normal = 3;// 普通：四肢，躯干
}

// 角色状态
message RoleState {
  // 角色 id/英雄 id | @inject_tag: msgpack:"id"
  int32 id  = 1;
  // 角色的坐标 | @inject_tag: msgpack:"pos"
  RolePosition pos = 2;
  // 角色技能信息 | @inject_tag: msgpack:"skills"
  repeated RoleSkill skills = 3;
}

// 玩家位置信息
message RolePosition {
  // @inject_tag: msgpack:"x"
  int32 x = 1;// x 轴坐标
  // @inject_tag: msgpack:"y"
  int32 y = 2;// y 轴坐标
}

// 角色技能
message RoleSkill {
  // 技能 id | @inject_tag: msgpack:"id"
  int32 id = 1;
  // 是否对施放者生效 | @inject_tag: msgpack:"forSelf"
  bool forSelf = 2;// 技能的增益对象
  // 技能状态 | @inject_tag: msgpack:"state"
  SkillState state = 3;
  // 技能的一些属性 | @inject_tag: msgpack:"attr"
  map<string, string> attr = 4; // 技能相关的属性
}


message RoomState {
  // @inject_tag: msgpack:"id"
  int32 id = 1;
  // @inject_tag: msgpack:"name"
  string name = 2;
  // @inject_tag: msgpack:"amount"
  int32 amount = 3;//房间当前用户数
  // @inject_tag: msgpack:"max"
  int32 max = 4; // 房间最大用户数量
  // @inject_tag: msgpack:"timeUpdate"
  int32 timeUpdate = 5;
}

message RoomDetail {
  // @inject_tag: msgpack:"id"
  int32 id = 1;
  // @inject_tag: msgpack:"name"
  string name = 2;
  // @inject_tag: msgpack:"amount"
  uint32 amount = 3;// 房间当前用户数量
  // @inject_tag: msgpack:"max"
  uint32 max = 4; // 房间最大用户数量
  // @inject_tag: msgpack:"timeUpdate"
  uint32 timeUpdate = 5;// 房间信息的最后更新时间
  // @inject_tag: msgpack:"roles"
  repeated RoleDetailed roles = 6;// 房间内的用户
  // @inject_tag: msgpack:"npcs"
  repeated RoleDetailed npcs = 7;// 房间内非玩家角色
  // @inject_tag: msgpack:"messages"
  repeated RoomMsgRecord messages = 8;// 房间历史聊天记录
}

message ResRoomJoin {
  // 当前玩家 uid | @inject_tag: msgpack:"uid"
  int32 uid  = 1;
  // 加入的房间信息 | @inject_tag: msgpack:"room"
  RoomDetail room = 2;
  // pvp 的关卡 id | @inject_tag: msgpack:"pvpLevelId"
  int32 pvpLevelId = 3;
}

message ResRoomForPveJoin {
  // 当前用户 uid | @inject_tag: msgpack:"uid"
  int32 uid  = 1;
  // 房间信息 | @inject_tag: msgpack:"room"
  RoomDetail room = 2;
  // pve 关卡信息 | @inject_tag: msgpack:"pveLevel"
  PveLevel pveLevel = 3;
}

// pve 关卡信息
message PveLevel {
  // 关卡 id | @inject_tag: msgpack:"id"
  int32 id = 1;
  // 关卡所属游戏模式  1 pve;2 pvp | @inject_tag: msgpack:"typ"
  int32 typ = 2;
  // 关卡资源 | @inject_tag: msgpack:"image"
  int32 image = 3;
  // 下一个关卡 id | @inject_tag: msgpack:"next"
  int32 next = 4;
  // 游戏模式 0一次击杀，1二次击杀 | @inject_tag: msgpack:"gameMode"
  int32 gameMode = 5;
  // 本方角色位置 | @inject_tag: msgpack:"OwnPos"
  RolePosition OwnPos = 6;
  // 敌方 a 的位置 | @inject_tag: msgpack:"OtherPosA"
  RolePosition OtherPosA = 7;
  // 距离出生距离的移动范围 | @inject_tag: msgpack:"moveRange"
  int32 moveRange = 8;
  // 关卡中，怪物 id 列表 | @inject_tag: msgpack:"monsterIds"
  repeated int32 monsterIds = 9;
  // 宝箱类型 | @inject_tag: msgpack:"rewardType"
  int32 rewardType = 10;
  // 关卡所需体力值 | @inject_tag: msgpack:"ps"
  int32 ps = 11;
  // 关卡完成后返还的体力值 | @inject_tag: msgpack:"backPs"
  int32 backPs  = 12;
  // 关卡描述信息 | @inject_tag: msgpack:"desc"
  DescInfo desc = 13;
  // 进入关卡时，玩家使用的角色信息 | @inject_tag: msgpack:"userRole"
  RoleInfo userRole = 14;
}

// 游戏中的 desc 信息
message DescInfo {
  // @inject_tag: msgpack:"id"
  int32 id  = 1;
  // @inject_tag: msgpack:"name"
  string name = 2;
  // @inject_tag: msgpack:"desc"
  string desc = 3;
  // @inject_tag: msgpack:"title"
  string title = 4;
}

// 房间内聊天记录信息
message RoomMsgRecord {
  // @inject_tag: msgpack:"time"
  string time = 1;
  // @inject_tag: msgpack:"role"
  RoleInfo role = 2;
  // @inject_tag: msgpack:"content"
  string content = 3;
}

message RoleInfo {
  // 角色 id | @inject_tag: msgpack:"id"
  int32 id = 1;
  // @inject_tag: msgpack:"nickname"
  string nickname = 2;
  // 角色相关资源 | @inject_tag: msgpack:"image"
  int32 image = 3;
  // 品质 | @inject_tag: msgpack:"quality"
  int32 quality = 4;
  // 生命值 | @inject_tag: msgpack:"hp"
  int32 hp = 5;
  // 防御力 | @inject_tag: msgpack:"def"
  int32 def = 6;
  // 攻击力 | @inject_tag: msgpack:"atk"
  int32 atk = 7;
  // 技能 id | @inject_tag: msgpack:"skillId"
  int32 skillId = 8;
  // 是否是怪物，true 怪物，false 角色 | @inject_tag: msgpack:"isMonster"
  bool isMonster = 9;
}

// 角色/英雄信息
message RoleDetailed {
  // 当前房间中，使用角色的玩家 uid | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // 玩家信息 | @inject_tag: msgpack:"roleInfo"
  RoleInfo roleInfo = 2;
  // 角色状态 | @inject_tag: msgpack:"state"
  RoleState state = 3;
  // 角色的一些属性，用于扩展 | @inject_tag: msgpack:"attributes"
  map<string, int32> attributes = 4;
}

// 游戏即将开始时，广播房间内玩家的状态
message GameStartInfo{
  // 描述 | @inject_tag: msgpack:"msg"
  string msg = 1;
  // 当前房间内，角色详情 | @inject_tag: msgpack:"roles"
  repeated RoleDetailed roles = 2;
  // 游戏开始时间 | @inject_tag: msgpack:"gameStartTime"
  int32 gameStartTime = 3;
}

// pve 对战开始下一轮
message PveNewRound {
  // 轮次 | @inject_tag: msgpack:"roundTh"
  int32 roundTh = 1;
  // 关卡 id | @inject_tag: msgpack:"levelId"
  int32 levelId = 2;
}

// 只有对自己生效的技能才会使用该请求
message SkillReleaseForSelf {}

message PlayerReleaseSkill {
  // 施放技能的玩家 uid | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // 施放技能的角色 id | @inject_tag: msgpack:"roleId"
  int32 roleId = 2;
  // 施放的技能 id | @inject_tag: msgpack:"skillId"
  int32 skillId = 3;
}

// 武器发生碰撞/阻挡
message WeaponBlock {
  // 发出攻击的玩家 uid | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // 发出攻击的角色 id | @inject_tag: msgpack:"roleId"
  int32 roleId = 2;
  // 对应的攻击 id | @inject_tag: msgpack:"atkId"
  string atkId = 3;
  // 发生碰撞时的坐标 | @inject_tag: msgpack:"weaponPos"
  RolePosition weaponPos = 4;
}

// 技能-回血推送
message SkillHot {
  // 目标玩家 uid | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // 目标玩家的角色 id | @inject_tag: msgpack:"roleId"
  int32 roleId = 2;
  // 所属的技能 id | @inject_tag: msgpack:"skillId"
  int32 skillId = 3;
  // 所属的技能效果 id | @inject_tag: msgpack:"skillId"
  int32 effectId = 4;
  // 技能效果类型 | @inject_tag: msgpack:"effectType"
  int32 effectType = 5;
  // 每秒回复的生命值 | @inject_tag: msgpack:"hotVal"
  int32 hotVal = 6;
  // 持续的秒数 | @inject_tag: msgpack:"keepSec"
  int32 keepSec = 7;
}

// 技能-僵直
message SkillRigidity {
  // 目标玩家 uid | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // 目标玩家的角色 id | @inject_tag: msgpack:"roleId"
  int32 roleId = 2;
  // 所属的技能 id | @inject_tag: msgpack:"skillId"
  int32 skillId = 3;
  // 所属的技能效果 id | @inject_tag: msgpack:"skillId"
  int32 effectId = 4;
  // 技能效果类型 | @inject_tag: msgpack:"effectType"
  int32 effectType = 5;
  // 持续时间 | @inject_tag: msgpack:"keepSec"
  int32 keepSec = 6;
  // 延长后的普攻的 cd 值 | @inject_tag: msgpack:"normalAtkCd"
  int32 normalAtkCd = 7;
  // 中技能的玩家 uid | @inject_tag: msgpack:"targetUid"
  int32 targetUid = 8;
  // 中技能的玩家的角色 id | @inject_tag: msgpack:"targetRoleId"
  int32 targetRoleId = 9;
}

// 反伤时间/反伤次数
message SkillBackWound {
  // 目标玩家 uid | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // 目标玩家的角色 id | @inject_tag: msgpack:"roleId"
  int32 roleId = 2;
  // 所属的技能 id | @inject_tag: msgpack:"skillId"
  int32 skillId = 3;
  // 所属的技能效果 id | @inject_tag: msgpack:"skillId"
  int32 effectId = 4;
  // 技能效果类型 | @inject_tag: msgpack:"effectType"
  int32 effectType = 5;
  // 持续时间 | @inject_tag: msgpack:"keepSec"
  int32 keepSec = 6;
  // 有效次数 | @inject_tag: msgpack:"remainTimes"
  int32 remainTimes = 7;
}

// 攻击提升
message SkillAtkImprove {
  // 目标玩家 uid | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // 目标玩家的角色 id | @inject_tag: msgpack:"roleId"
  int32 roleId = 2;
  // 所属的技能 id | @inject_tag: msgpack:"skillId"
  int32 skillId = 3;
  // 所属的技能效果 id | @inject_tag: msgpack:"skillId"
  int32 effectId = 4;
  // 技能效果类型 | @inject_tag: msgpack:"effectType"
  int32 effectType = 5;
  // 持续时间 | @inject_tag: msgpack:"keepSec"
  int32 keepSec = 6;
  // 有效次数 | @inject_tag: msgpack:"remainTimes"
  int32 remainTimes = 7;
}

// 护盾
message SkillShield {
  // 目标玩家 uid | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // 目标玩家的角色 id | @inject_tag: msgpack:"roleId"
  int32 roleId = 2;
  // 所属的技能 id | @inject_tag: msgpack:"skillId"
  int32 skillId = 3;
  // 所属的技能效果 id | @inject_tag: msgpack:"skillId"
  int32 effectId = 4;
  // 技能效果类型 | @inject_tag: msgpack:"effectType"
  int32 effectType = 5;
  // 有效次数 | @inject_tag: msgpack:"remainTimes"
  int32 remainTimes = 6;
}

// 防御提升
message SkillDefenseImprove {
  // 目标玩家 uid | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // 目标玩家的角色 id | @inject_tag: msgpack:"roleId"
  int32 roleId = 2;
  // 所属的技能 id | @inject_tag: msgpack:"skillId"
  int32 skillId = 3;
  // 所属的技能效果 id | @inject_tag: msgpack:"skillId"
  int32 effectId = 4;
  // 技能效果类型 | @inject_tag: msgpack:"effectType"
  int32 effectType = 5;
  // 持续时间 | @inject_tag: msgpack:"keepSec"
  int32 keepSec = 6;
}
