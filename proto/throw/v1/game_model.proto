syntax = "proto3";

package throw.v1;
option go_package = "github.com/suhanyujie/throw_interface/proto/throw/v1;v1";

// 游戏开始，服务端推送给客户端
message GameStart {
  string msg = 2;// 游戏即将开始 倒计时 3 s
}

// 客户端玩家发起一次攻击
message AttackOnceInfo {
  int32 uid = 1;  // 发起攻击的用户 id
}

// 攻击结果
// 服务端推送给客户端
message AttackOnceResult {
  // @inject_tag: json:"event" msgpack:"event"
  string event = 1;
  // @inject_tag: msgpack:"msg"
  string msg = 2;
  // @inject_tag: msgpack:"attackType"
  string attackType = 3; // 攻击类型，目前先普通攻击
  // @inject_tag: msgpack:"players"
  repeated PlayerStatus players = 4;
  // @inject_tag: msgpack:"from"
  int32 from = 5;  // 攻击方
  // @inject_tag: msgpack:"to"
  int32 to = 6; // 受到攻击的一方
  // @inject_tag: msgpack:"hitInfo"
  HitInfo hitInfo = 7; // 命中信息
}

// 一次攻击的命中信息
message HitInfo {
  // 是否命中 | @inject_tag: json:"isHit" msgpack:"isHit"
  bool isHit = 1;
  // 命中部位 | @inject_tag: json:"pos" msgpack:"pos"
  HitPos pos = 2;
}

message PlayerStatus {
  // @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // @inject_tag: msgpack:"heroId"
  int32 heroId = 2;
  // @inject_tag: msgpack:"hp"
  int32 hp = 3;
  // @inject_tag: msgpack:"name"
  string name = 4;
}

// 退出游戏房间
// 考虑一下，游戏中途时，用户退出房间，如何处理？
message UserQuit {
  // @inject_tag: msgpack:"uid"
  int32 uid = 1;
}

// 游戏结束时，服务端推送消息给客户端
// `event` 表示游戏结束标识，用于前端识别，该推送是什么事件/消息
message GameOver {
  // @inject_tag: msgpack:"winPlayer"
  PlayerStatus winPlayer = 1;
  // @inject_tag: msgpack:"losePlayer"
  PlayerStatus losePlayer = 2;
  // @inject_tag: msgpack:"event"
  string event = 3;
  // @inject_tag: msgpack:"msg"
  string msg = 4;
}

// 玩家移动
message RoleMove {
  // @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // @inject_tag: msgpack:"target"
  RolePosition target = 2;
  // @inject_tag: msgpack:"vector"
  RolePosition vector = 3;
  // @inject_tag: msgpack:"angle"
  int32 angle = 4;
  // @inject_tag: msgpack:"joystick"
  bool joystick = 5;
  // @inject_tag: msgpack:"skillId"
  int32 skillId = 6;
  // @inject_tag: msgpack:"targetId"
  int32 targetId = 7;
}

enum SkillState {
  // 前摇状态
  Front = 0;
  // 施放状态
  Casting = 1;
  // 后摇状态
  Back = 2;
  // 冷却
  Cooling = 3;
  // 就绪
  Ready = 4;
}

// 广播攻击行为
message MsgRoleAttack {
  // 玩家编号 | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // @inject_tag: msgpack:"skillId"
  int32 skillId = 2;
  // 技能状态 | @inject_tag: msgpack:"state"
  SkillState state = 3;
  // 目标玩家编号（uid） | @inject_tag: msgpack:"targetId"
  int32 targetId = 4;
  // @inject_tag: msgpack:"pos"
  RolePosition pos = 5; // 攻击方坐标
  // @inject_tag: msgpack:"atkInput"
  SInputData atkInput = 6; // 攻击参数
  // 敌方如果是机器人，则携带此参数。由后端告知前端是否命中
  BotAtkInfo botAtk = 7;
}

message BotAtkInfo {
  // 是否避障。1避障，2不避障  | @inject_tag: msgpack:"avoidance"
  int32 avoidance  = 1;
  // 攻击方式，普攻还是技能    1普攻，2技能  | @inject_tag: msgpack:"atkStyle"
  int32 atkStyle  = 2;
  // 攻击结果 1命中，2差一点点，3乱扔  | @inject_tag: msgpack:"hitRes"
  int32 hitRes  = 3;
  // 命中部位 | @inject_tag: msgpack:"hitPos"
  HitPos hitPos  = 4;
  // 是否能被反弹 | @inject_tag: msgpack:"canRebound"
  // bool canRebound  = 5;
}

message SInputData {
  // 发射起点x | @inject_tag: msgpack:"sx"
  int32 sx = 1;
  // 发射起点y | @inject_tag: msgpack:"sy"
  int32 sy = 2;
  // 速度 | @inject_tag: msgpack:"vx"
  int32 vx = 3;
  // @inject_tag: msgpack:"vy"
  int32 vy = 4;
  // 重力刻度 | @inject_tag: msgpack:"gs"
  int32 gs = 5;
  // 重力系数 | @inject_tag: msgpack:"g"
  int32 g = 6;
  // 部位偏移 x
  int32 ex = 7;
  // 部位偏移 y
  int32 ey = 8;
  // 部位 1，头，2，中间，3 下面
  int32 parts = 9;
}

message HitRoleInfo {
  // 玩家编号 | @inject_tag: msgpack:"uid"
  int32 uid = 1;
  // @inject_tag: msgpack:"skillId"
  int32 skillId = 2;
  // 技能状态 | @inject_tag: msgpack:"state"
  SkillState state = 3;
  // 目标玩家编号（uid） | @inject_tag: msgpack:"targetId"
  int32 targetId = 4;
  // @inject_tag: msgpack:"rolePos"
  RolePosition rolePos = 5; // 攻击方坐标
  // @inject_tag: msgpack:"hitPos"
  HitPos hitPos = 6;
  // @inject_tag: msgpack:"atkInput"
  SInputData atkInput = 7; // 攻击参数
}


enum HitPos {
  Normal = 0;// 普通：四肢，躯干
  Fatal = 1;// 致命：头部
  Secondary = 2;// 次要：膝盖
}

// 角色状态
message RoleState {
  // @inject_tag: msgpack:"id"
  int32 id  = 1;// 角色 id/英雄 id
  // @inject_tag: msgpack:"pos"
  RolePosition pos = 2;
  // @inject_tag: msgpack:"skills"
  repeated RoleSkill skills = 3;
}

// 玩家位置信息
message RolePosition {
  // @inject_tag: msgpack:"x"
  int32 x = 1;// x 轴坐标
  // @inject_tag: msgpack:"y"
  int32 y = 2;// y 轴坐标
}

// 角色技能
message RoleSkill {
  // @inject_tag: msgpack:"id"
  int32 id = 1;
  // @inject_tag: msgpack:"forSelf"
  bool forSelf = 2;// 技能的增益对象
  // @inject_tag: msgpack:"state"
  SkillState state = 3;
  // @inject_tag: msgpack:"attr"
  map<string, string> attr = 4; // 技能相关的属性
}


message RoomState {
  // @inject_tag: msgpack:"id"
  int32 id = 1;
  // @inject_tag: msgpack:"name"
  string name = 2;
  // @inject_tag: msgpack:"amount"
  int32 amount = 3;//房间当前用户数
  // @inject_tag: msgpack:"max"
  int32 max = 4; // 房间最大用户数量
  // @inject_tag: msgpack:"timeUpdate"
  int32 timeUpdate = 5;
}

message RoomDetail {
  // @inject_tag: msgpack:"id"
  int32 id = 1;
  // @inject_tag: msgpack:"name"
  string name = 2;
  // @inject_tag: msgpack:"amount"
  uint32 amount = 3;// 房间当前用户数量
  // @inject_tag: msgpack:"max"
  uint32 max = 4; // 房间最大用户数量
  // @inject_tag: msgpack:"timeUpdate"
  uint32 timeUpdate = 5;// 房间信息的最后更新时间
  // @inject_tag: msgpack:"roles"
  repeated RoleDetailed roles = 6;// 房间内的用户
  // @inject_tag: msgpack:"npcs"
  repeated RoleDetailed npcs = 7;// 房间内非玩家角色
  // @inject_tag: msgpack:"messages"
  repeated RoomMsgRecord messages = 8;// 房间历史聊天记录
}

message ResRoomJoin {
  // @inject_tag: msgpack:"uid"
  int32 uid  = 1;
  // @inject_tag: msgpack:"room"
  RoomDetail room = 2;
}

// 房间内聊天记录信息
message RoomMsgRecord {
  // @inject_tag: msgpack:"time"
  string time = 1;
  // @inject_tag: msgpack:"role"
  RoleInfo role = 2;
  // @inject_tag: msgpack:"content"
  string content = 3;
}

message RoleInfo {
  // 角色 id | @inject_tag: msgpack:"id"
  int32 id = 1;
  // @inject_tag: msgpack:"nickname"
  string nickname = 2;
  // 角色相关资源 | @inject_tag: msgpack:"image"
  int32 image = 3;
  // 品质 | @inject_tag: msgpack:"quality"
  int32 quality = 4;
  // 生命值 | @inject_tag: msgpack:"hp"
  int32 hp = 5;
  // 防御力 | @inject_tag: msgpack:"def"
  int32 def = 6;
  // 攻击力 | @inject_tag: msgpack:"atk"
  int32 atk = 7;
  // 技能 id | @inject_tag: msgpack:"skillId"
  int32 skillId = 8;
  // 是否是怪物，true 怪物，false 角色 | @inject_tag: msgpack:"isMonster"
  bool isMonster = 9;
}

// 角色/英雄信息
message RoleDetailed {
  // @inject_tag: msgpack:"roleInfo"
  RoleInfo roleInfo = 1;
  // @inject_tag: msgpack:"state"
  RoleState state = 2;
  // @inject_tag: msgpack:"attributes"
  map<string, int32> attributes = 3;
}

// 游戏即将开始时，广播房间内玩家的状态
message GameStartInfo{
  // @inject_tag: msgpack:"msg"
  string msg = 1;
  // @inject_tag: msgpack:"roles"
  repeated RoleDetailed roles = 2;
}